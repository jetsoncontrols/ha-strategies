import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';

interface LovelaceConfig {
  title?: string;
  views?: any[];
  [key: string]: any;
}

interface StrategyConfig {
  type: string;
  [key: string]: any;
}

interface HAStrategiesConfig extends StrategyConfig {
  type: 'custom:ha-strategies';
}

@customElement('ha-strategies')
export class HAStrategies extends LitElement {
  @property({ attribute: false }) public hass: any;
  @property({ attribute: false }) public config!: HAStrategiesConfig;

  static get styles() {
    return css`
      :host {
        display: block;
      }
    `;
  }

  protected render() {
    return html`
      <div>
        <h2>HA Strategies</h2>
        <p>Home Assistant Lovelace Strategy Component</p>
      </div>
    `;
  }

  /**
   * Generate the Lovelace configuration based on the strategy
   */
  static async generateConfig(
    _hass: any,
    _config: HAStrategiesConfig
  ): Promise<LovelaceConfig> {
    // Basic strategy implementation
    const generatedConfig: LovelaceConfig = {
      title: 'HA Strategies Dashboard',
      views: [
        {
          title: 'Home',
          path: 'home',
          cards: [
            {
              type: 'markdown',
              content: 'Welcome to HA Strategies!\n\nThis is a sample dashboard generated by the strategy.'
            }
          ]
        }
      ]
    };

    return generatedConfig;
  }
}

// Register the strategy
(window as any).customCards = (window as any).customCards || [];
(window as any).customCards.push({
  type: 'ha-strategies',
  name: 'HA Strategies',
  description: 'Home Assistant Lovelace Strategies'
});

console.info(
  '%c  HA-STRATEGIES  %c  1.0.0  ',
  'color: orange; font-weight: bold; background: black',
  'color: white; font-weight: bold; background: dimgray'
);

declare global {
  interface HTMLElementTagNameMap {
    'ha-strategies': HAStrategies;
  }
}