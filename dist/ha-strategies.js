class t extends AbstractView{constructor(){super()}static async generate(t){return Object.keys(t.states).filter(t=>t.startsWith("light.")).map(e=>t.states[e]).map(t=>({type:"tile",entity:t.entity_id,name:t.attributes.friendly_name||t.entity_id,show_entity_picture:!1,tap_action:{action:"toggle"}}))}}class e extends HTMLElement{static async generate(e,n){console.info("HA-STRATEGIES: Strategy options:",e);const i=new Date,a=Object.keys(n.states).filter(t=>t.startsWith("light.")).map(t=>n.states[t]).map(t=>({type:"tile",entity:t.entity_id,name:t.attributes.friendly_name||t.entity_id,show_entity_picture:!1,tap_action:{action:"toggle"}}));a.length;const s=JSON.stringify(e,null,2),r=`# Admin Information\n\n## Generation Time\n**Generated:** ${i.toLocaleString()}\n\n## Strategy Options\n\`\`\`json\n${s}\n\`\`\`\n\n## Statistics\n- **Strategy Type:** ${e.type}`;return{title:"Lighting Dashboard",views:[{title:"Lights",path:"lights",cards:await t.generate(n)},{title:"Admin",path:"admin",cards:[{type:"markdown",content:r}]}]}}}customElements.define("ll-strategy-dashboard-ha-strategies",e);export{e as HaStrategies};
//# sourceMappingURL=ha-strategies.js.map
